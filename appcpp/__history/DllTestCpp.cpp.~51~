//---------------------------------------------------------------------------

#include <vcl.h>



#pragma hdrstop

#include "DllTestCpp.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"




TDllTestCppF *DllTestCppF;



extern "C" int __declspec(dllexport) __stdcall ValidaCodigo(String sParametro1, String sParametro2);
//	MemoLog->Lines->Add(IntToStr(ValidaCodigo(EditParam1->Text, EditParam2->Text)));


//---------------------------------------------------------------------------
__fastcall TDllTestCppF::TDllTestCppF(TComponent* Owner)
	: TForm(Owner)
{
}

//---------------------------------------------------------------------------

//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
void __fastcall TDllTestCppF::Button1Click(TObject *Sender)
{

//extern "C" int __declspec(dllexport) __stdcall ValidaCodigo(std::string sParametro1, std::string sParametro2){

// For Static Linking using the function prototype and the .LIB
// file, we can call the Sum function:
	//	ShowMessage(Sum(4,7));

// For Dynamic Linking, we use code like this for
// Run-Time Linking.  With Run-Time (Dynamic) Linking, you load
// the DLL manually, using LoadLibrary, and you locate the
// function you wnat to call, using GetProcAddress,
	HINSTANCE CppMyDll;
	typedef int(__stdcall * pfValidaCodigo)(String, String);
	pfValidaCodigo ValidaCodigo;

	if ((CppMyDll = LoadLibraryW(L"Valida.dll")) == NULL) {
		ShowMessage(L"Cannot load DLL!");
		return;
	}
	if ((ValidaCodigo = (pfValidaCodigo)GetProcAddress(CppMyDll, "ValidaCodigo")) == NULL) {
		ShowMessage(L"Cannot find DLL function!");
		return;
	}
		ShowMessage(ValidaCodigo("25", "75"));
		FreeLibrary(CppMyDll);






}
//---------------------------------------------------------------------------
void __fastcall TDllTestCppF::ButtonProbarDllClick(TObject *Sender)
{
	MemoLog->Lines->Add(IntToStr(ValidaCodigo(EditParam1->Text, EditParam2->Text)));
}
//---------------------------------------------------------------------------
